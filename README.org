#+TITLE: unpackaged.el
#+OPTIONS: broken-links:t num:nil H:8
#+TAGS: Emacs

#+HTML: <a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="images/dont-tread-on-emacs-150.png" align="right"></a>

A collection of useful Emacs Lisp code that isn't substantial enough to be packaged.  This code will be maintained here so that it can be updated and improved over time.

Contributions welcome!

Functions in this file generally use these helper packages:

+  [[https://github.com/magnars/dash.el][dash.el]] (including ~dash-functional~)
+  [[https://github.com/magnars/s.el][s.el]]

* Contents
:PROPERTIES:
:TOC:    this
:END:
  -  [[#faces-fonts][Faces, fonts]]
    -  [[#font-compare][~font-compare~]]
  -  [[#meta][Meta]]
    -  [[#code-emphasis][Code emphasis]]
  -  [[#version-control][Version control]]
    -  [[#magit][Magit]]
      -  [[#magit-log-date-headers][~magit-log~ date headers]]

* Faces, fonts                                                  :faces:fonts:

** ~font-compare~
:PROPERTIES:
:TOC:      0
:END:

Compare ~TEXT~ displayed in ~FONTS~.  ~FONTS~ is a list of font specs.

Interactively, prompt for ~TEXT~, using ~lorem-ipsum~ text if nil or the empty string, and select ~FONTS~ with ~x-select-font~ (select an already-selected font to end font selection).

*Requires:*
+  [[https://github.com/jschaf/emacs-lorem-ipsum][emacs-lorem-ipsum]]

[[images/font-compare.png]]

#+BEGIN_SRC elisp
  (defun unpackaged/font-compare (text fonts)
    "Compare TEXT displayed in FONTS.
  If TEXT is nil, use `lorem-ipsum' text.  FONTS is a list of font
  family strings and/or font specs.

  Interactively, prompt for TEXT, using `lorem-ipsum' if left
  empty, and select FONTS with `x-select-font' (select an
  already-selected font to end font selection)."
    (interactive (list (pcase (read-string "Text: ")
                         ("" nil)
                         (else else))
                       (cl-loop for font = (x-select-font)
                                ;; HACK: `x-select-font' calls quit() when the Cancel button is
                                ;; pressed, so to avoid quit()'ing, we signal in-band by selecting a
                                ;; font that has already been selected.
                                while (not (member font fonts))
                                collect font into fonts
                                finally return fonts)))
    (setq text (or text (s-word-wrap 80 (s-join " " (progn
                                                      (require 'lorem-ipsum)
                                                      (seq-random-elt lorem-ipsum-text))))))
    (with-current-buffer (get-buffer-create "*Font Compare*")
      (erase-buffer)
      (--each fonts
        (let ((family (cl-typecase it
                        (font (symbol-name (font-get it :family)))
                        (string it))))
          (insert family ": "
                  (propertize text
                              'face (list :family family))
                  "\n\n")))
      (pop-to-buffer (current-buffer))))
#+END_SRC

*** COMMENT Potential improvements                               :noexport:

**** TODO Apply more face properties

e.g. weight, slant, etc.

**** TODO Default size setting

It might be helpful to use a larger size by default.

* Meta                                                                 :meta:

Code used to help maintain this document.

** Code emphasis

#+BEGIN_SRC elisp
  (defun unpackaged/docstring-to-org (docstring)
    "Return DOCSTRING as formatted Org text.

  Interactively, get text from region, and kill formatted Org text
  to kill-ring."
    (interactive (list (buffer-substring (region-beginning) (region-end))))
    (cl-macrolet ((string-buffer--> (string &rest forms)
                                    `(with-temp-buffer
                                       (insert ,string)
                                       ,@(cl-loop for form in forms
                                                  collect `(goto-char (point-min))
                                                  collect form)
                                       (buffer-string))))
      (--> (string-buffer--> docstring
                             (unpackaged/caps-to-code (point-min) (point-max))
                             (unpackaged/symbol-quotes-to-org-code (point-min) (point-max))
                             (unfill-region (point-min) (point-max))
                             (while (re-search-forward (rx bol (group (1+ blank))) nil t)
                               (replace-match "" t t nil 1))
                             (when (looking-at "\"")
                               (delete-char 1))
                             (when (progn
                                     (goto-char (point-max))
                                     (looking-back "\""))
                               (delete-char -1)))
           (if (called-interactively-p)
               (progn
                 (message it)
                 (kill-new it))
             it))))

  (defun unpackaged/caps-to-code (beg end)
    "Convert all-caps words in region to Org code emphasis."
    (interactive "r")
    (let ((case-fold-search nil))
      (save-excursion
        (save-restriction
          (narrow-to-region beg end)
          (goto-char (point-min))
          (while (re-search-forward (rx (or space bol)
                                        (group (1+ upper))
                                        (or space eol (char punct)))
                                    nil t)
            (setf (buffer-substring (match-beginning 1) (match-end 1))
                  (concat "~" (match-string 1) "~"))
            (goto-char (match-end 0)))))))

  (defun unpackaged/symbol-quotes-to-org-code (beg end)
    "Change Emacs `symbol' quotes to Org =symbol= quotes in region."
    (interactive "r")
    (save-excursion
      (save-restriction
        (goto-char beg)
        (narrow-to-region beg end)
        (while (re-search-forward (rx (or "`" "â€˜") (group (1+ (or "-" word))) "'") nil t)
          (replace-match (concat "~" (match-string 1) "~") t)))))
#+END_SRC


*** COMMENT Tasks
:PROPERTIES:
:TOC:      ignore
:END:

**** MAYBE Publish these on emacs-package-dev-handbook instead

Not sure which place they best belong, but they should at least be linked in both.

* Version control                                           :version_control:

** Magit                                                             :Magit:

*** ~magit-log~ date headers

Add date headers to Magit log buffers.

*Requires:*
+  [[https://github.com/ShingoFukuyama/ov.el][ov.el]]

[[images/magit-log-date-headers.png]]

#+BEGIN_SRC elisp
  (defun unpackaged/magit-log--add-date-headers (&rest _ignore)
    "Add date headers to Magit log buffers."
    (when (derived-mode-p 'magit-log-mode)
      (save-excursion
        (goto-char (point-min))
        (ov-clear 'date-header t)
        (--> (cl-loop for ov in (cdr (ov-all))
                      for margin-text = (-some--> (ov-val ov 'before-string)
                                                  (cadr (get-text-property 0 'display it)))
                      when margin-text
                      for age = (when (string-match (rx (group (1+ digit) ; number
                                                               " "
                                                               (1+ (not blank))) ; unit
                                                        (1+ blank) eol)
                                                    margin-text)
                                  (match-string-no-properties 1 margin-text))
                      collect (cons age (ov-beg ov)))
             (-group-by #'car it)
             (--map (cons (car it) (-sort (-on #'< #'cdr) (cdr it)))
                    it)
             (--map (cons (car it) (cdadr it)) it)
             (cl-loop for (age . pos) in it
                      do (ov (1- pos) (1- pos)
                             'after-string (propertize (concat " " age "\n")
                                                       'face 'magit-section-heading)
                             'date-header t))))))

  (add-hook 'magit-post-refresh-hook #'unpackaged/magit-log--add-date-headers)
  (advice-add #'magit-mode-setup :after #'unpackaged/magit-log--add-date-headers)
#+END_SRC

This isn't always perfect, because dates in a git commit log are not always in order (e.g. when commits are merged at a later date), but it's often very helpful to visually group commits by their age.

* License
:PROPERTIES:
:TOC:      ignore
:END:

GPLv3

* COMMENT Tasks / Ideas
:PROPERTIES:
:TOC:      ignore
:END:

** MAYBE Tangle with Babel

Might be nice to be able to tangle all of the ~unpackaged/~ functions into a single file.

* COMMENT Config
:PROPERTIES:
:TOC:      ignore
:END:

I love Emacs and Org mode.  This makes it so easy to make the document...alive!  And automated!  Beautiful.

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# after-save-hook: (lambda nil (when (org-html-export-to-html) (rename-file "README.html" "index.html" t)))
# org-export-with-properties: ()
# org-export-with-title: t
# End:


